#!/usr/bin/env bash

set -euo pipefail

# Change to repo root
cd "$(dirname "$0")/.."

# This should match the version used by HA core
PY_VERSION=${PY_VERSION:-3.13.2}

DEBIAN_FRONTEND=noninteractive

echo "[setup] Updating apt cache and installing base packages..."
apt-get update

# Core build and tooling
apt-get install -y --no-install-recommends \
	ca-certificates \
	curl \
	git \
	openssh-client \
	build-essential \
	pkg-config \
	cmake \
	autoconf

# HA-like optional libs (safe to install; used by some integrations/tests)
apt-get install -y --no-install-recommends \
	bluez \
	ffmpeg \
	libudev-dev \
	libavformat-dev \
	libavcodec-dev \
	libavdevice-dev \
	libavutil-dev \
	libgammu-dev \
	libswscale-dev \
	libswresample-dev \
	libavfilter-dev \
	libpcap-dev \
	libturbojpeg0 \
	libyaml-dev \
	libxml2

# Pre-create .ssh with safe permissions (useful for mounting keys)
mkdir -p /root/.ssh
chmod 700 /root/.ssh

echo "[setup] Installing uv (Python toolchain manager)..."
if ! command -v uv >/dev/null 2>&1; then
	# Install uv to ~/.local/bin/uv
	curl -fsSL https://astral.sh/uv/install.sh | sh
fi

# Ensure uv is on PATH
export PATH="$HOME/.local/bin:$PATH"
if [[ -d "$HOME/.cargo/bin" ]]; then
	export PATH="$HOME/.cargo/bin:$PATH"
fi

echo "[setup] Ensuring Python ${PY_VERSION} is available..."
uv python install "${PY_VERSION}"

echo "[setup] Creating fresh virtual environment at .venv..."
uv venv --clear --python "${PY_VERSION}" .venv

echo "[setup] Installing dependencies..."
uv pip install --python .venv/bin/python -r requirements.txt

echo "[setup] Cleaning apt cache..."
apt-get clean
rm -rf /var/lib/apt/lists/*
